variables:
  IMAGE_TAG: 1.0.0-edge
  APP_NAME: edm-cms
  KUBECONFIG: /etc/deploy/config
  TESTING_IMAGE: ${CI_REGISTRY_IMAGE}/testing
  STAGING_IMAGE: apuscorp/edm:dev-${CI_PIPELINE_IID}-${CI_COMMIT_SHA}
  PROD_IMAGE: apuscorp/edm:prod-${CI_PIPELINE_IID}-${CI_COMMIT_SHA}
  STAGING_IMAGE_LTS: apuscorp/edm:dev-latest
  PROD_IMAGE_LTS: apuscorp/edm:prod-latest
  DOCKER_DRIVER: overlay
  DOCKER_TLS_CERTDIR: ''

before_script:
  - uname -a
  - hostname
  - whoami

stages:
  - sonar
  - build_and_test
  - docker_build
  - deploy

services:
  - name: quay.io/shakeys/docker:dind
    command: [ '--experimental' ]

# sonarqube-scan:
#   stage: sonar
#   tags:
#     - gitlab
#   before_script: [ ]
#   needs: [ ]
#   image:
#     name: sonarsource/sonar-scanner-cli
#     entrypoint: [ '' ]
#   variables:
#     SONAR_USER_HOME: '${CI_PROJECT_DIR}/.sonar' # Defines the location of the analysis task cache
#     GIT_DEPTH: '0' # Tells git to fetch all the branches of the project, required by the analysis task
#   cache:
#     key: '${CI_JOB_NAME}'
#     paths:
#       - .sonar/cache
#   script:
#     # Install eslint
#     # - |
#     #   yarn add -D sonarqube-scanner --dev \
#     #   yarn add -D jest-sonar-reporter --dev
#     - sonar-scanner -Dsonar.projectKey=apusplatform.com:edm -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_ANALYSIS_TOKEN -Dsonar.javascript.file.suffixes=.js,.jsx -Dsonar.typescript.lcov.reportPaths=coverage/lcov.info -Dsonar.qualitygate.wait=true -Dsonar.qualitygate.timeout=300
#   allow_failure: false
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "push"'

job_docker_build:
  image: docker:stable
  tags:
    - dev-runner-new
  stage: docker_build
  before_script:
    - docker info
    - docker login -u "${CI_REGISTRY_USER}" -p "${CI_REGISTRY_PASSWORD}" ${CI_REGISTRY}
  script:
    - release_date=$(TZ=UTC-8 date "+%Y-%m-%d %H:%M")
    - docker pull ${STAGING_IMAGE_LTS} || true
    - docker pull ${PROD_IMAGE_LTS} || true
    - if [ ${CI_COMMIT_REF_NAME} = "master" ] ; then  echo "$env_prod" > .env || true ; else echo "$env_dev" > .env || true ; fi
    - if [ ${CI_COMMIT_REF_NAME} = "develop" ] || [ ${CI_COMMIT_REF_NAME} = "develop-new" ] ; then docker build --build-arg build_env=dev --build-arg release_date='${release_date}' --build-arg GITLAB_URL=${GITLAB_URL} --build-arg GITLAB_LOGIN=${GITLAB_LOGIN} --build-arg GITLAB_TOKEN=${GITLAB_TOKEN} --cache-from ${STAGING_IMAGE_LTS} -t ${STAGING_IMAGE} . ; elif [ ${CI_COMMIT_REF_NAME} = "staging" ] ; then docker build --pull --build-arg build_env=stag --build-arg release_date='${release_date}' --build-arg GITLAB_URL=${GITLAB_URL} --build-arg GITLAB_LOGIN=${GITLAB_LOGIN} --build-arg GITLAB_TOKEN=${GITLAB_TOKEN} --cache-from ${STAGING_IMAGE_LTS} -t ${STAGING_IMAGE} . ; else docker build --build-arg build_env= prod --build-arg release_date='${release_date}' --build-arg GITLAB_URL=${GITLAB_URL} --build-arg GITLAB_LOGIN=${GITLAB_LOGIN} --build-arg GITLAB_TOKEN=${GITLAB_TOKEN} --cache-from ${PROD_IMAGE_LTS} -t ${PROD_IMAGE} . ; fi
    - if [ ${CI_COMMIT_REF_NAME} = "develop" ] || [ ${CI_COMMIT_REF_NAME} = "staging" ] || [ ${CI_COMMIT_REF_NAME} = "develop-new" ] ; then docker tag ${STAGING_IMAGE} ${STAGING_IMAGE_LTS} ; else docker tag ${PROD_IMAGE}; fi
    - if [ ${CI_COMMIT_REF_NAME} = "develop" ] || [ ${CI_COMMIT_REF_NAME} = "staging" ] || [ ${CI_COMMIT_REF_NAME} = "develop-new" ] ; then docker push ${STAGING_IMAGE} ; else docker push ${PROD_IMAGE} ; fi
    - if [ ${CI_COMMIT_REF_NAME} = "develop" ] || [ ${CI_COMMIT_REF_NAME} = "staging" ] || [ ${CI_COMMIT_REF_NAME} = "develop-new" ] ; then docker push ${STAGING_IMAGE_LTS} ; else docker push ${PROD_IMAGE_LTS} ; fi
  only:
    - master
    - develop
    - branch/edge
    - staging
    - k8s
    - develop-new
#  except:
#    changes:
#      - ./**/*.md
#      - ./codestyle/**
#      - ./deoloy/**
#      - ./.gitignore

deploy-dev:
  tags:
    - dev-runner-new
  stage: deploy
  variables:
    SERVICE_NAME: edm
  environment: sandbox
  script:
    - docker login -u "${CI_REGISTRY_USER}" -p "${CI_REGISTRY_PASSWORD}" ${CI_REGISTRY}
    - export DOCKER_HOST=tcp://172.17.0.1:2376 DOCKER_TLS_VERIFY=1
    - mkdir -p ~/.docker
    - echo "$TLSCACERDEV_NEW" > ~/.docker/ca.pem
    - echo "$TLSCERTDEV_NEW" > ~/.docker/cert.pem
    - echo "$TLSKEYDEV_NEW" > ~/.docker/key.pem
    - sed -i -e "s+%DOCKER_IMAGE%+${STAGING_IMAGE}+g" edm-dev.yml
    - docker stack deploy --compose-file=edm-dev.yml --with-registry-auth ${SERVICE_NAME}
  only:
    - develop
    - develop-new

deploy-staging:
  tags:
    - apus-runner-stg
  stage: deploy
  variables:
    SERVICE_NAME: edm
  environment: sandbox
  script:
    - docker login -u "${CI_REGISTRY_USER}" -p "${CI_REGISTRY_PASSWORD}" ${CI_REGISTRY}
    - export DOCKER_HOST=tcp://172.17.0.1:2376 DOCKER_TLS_VERIFY=1
    - mkdir -p ~/.docker
    - echo "$TLSCACERSTAG_NEW" > ~/.docker/ca.pem
    - echo "$TLSCERTSTAG_NEW" > ~/.docker/cert.pem
    - echo "$TLSKEYSTAG_NEW" > ~/.docker/key.pem
    - sed -i -e "s+%DOCKER_IMAGE%+${STAGING_IMAGE}+g" edm-stg.yml
    - docker stack deploy --compose-file=edm-stg.yml --with-registry-auth ${SERVICE_NAME}
  only:
    - staging

# deploy-prod-k8s:
#   tags:
#     - web
#   stage: deploy
#   variables:
#     MODULE_NAME: co-salon-admin-console
#   services:
#     - name: docker:dind
#   image: lwolf/helm-kubectl-docker:v1.11.8-v2.13.0
#   before_script:
#     - ls -la
#     - mkdir -p /etc/deploy
#     - echo "$kube_config" > ${KUBECONFIG}
#     - kubectl config use-context k8s.cosalon.vn
#     - helm init --client-only
#     - helm repo add stable https://kubernetes-charts.storage.googleapis.com/
#     - helm repo add incubator https://kubernetes-charts-incubator.storage.googleapis.com/
#     - helm repo update
#   script:
#     - cd helm-data/ && ls -la
#     - helm upgrade --install  --wait --set global.env=prod,image.repository=${CI_REGISTRY_IMAGE}/base-point/${MODULE_NAME},image.tag=${CI_PIPELINE_IID}-${CI_COMMIT_SHA} --namespace=${PROD_NAMESPACE} admin-console .
#   retry: 2
#   only:
#     - master
#     - k8s
